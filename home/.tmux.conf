# Start new session when server is started
new-session

# Forward prefix sequence to nested tmux sessions
bind-key b send-prefix

# Reload this configuration file with Prefix+r
bind R source-file ~/.tmux.conf \; display-message "Config reloaded..."

# New session
bind-key N new-session

# Kill session
bind-key X confirm-before -p "Kill #S (y/n)?" "run-shell 'tmux switch-client -n \\\; kill-session -t \"\$(tmux display-message -p \"#S\")\"'"

# VI-like bindings
setw -g mode-keys vi
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R
bind-key -r C-h select-window -t :-
bind-key -r C-l select-window -t :+

unbind [
bind Escape copy-mode
unbind p
bind p paste-buffer
bind -Tcopy-mode-vi v send -X begin-selection
bind -Tcopy-mode-vi y send -X copy-selection

# Make mouse useful in copy mode
setw -g mode-mouse on

# Allow mouse to select which pane to use
set -g mouse-select-pane on

# Allow mouse to select which window to use
set -g mouse-select-window on

# Allow mouse to resize panes
set -g mouse-resize-pane on

# Allow xterm titles in terminal window, terminal scrolling with scrollbar, and setting overrides of C-Up, C-Down, C-Left, C-Right
set -g terminal-overrides "xterm*:XT:smcup@:rmcup@:kUP5=\eOA:kDN5=\eOB:kLFT5=\eOD:kRIT5=\eOC"

# Scroll History
set -g history-limit 30000

# Set ability to capture on start and restore on exit window data when running an application
setw -g alternate-screen on

# Lower escape timing from 500ms to 50ms for quicker response to scroll-buffer access.
set -s escape-time 50

# Aggressive resizing
setw -g aggressive-resize on

# Don't capture Ctrl-Tab so it can be used with VIM
set -g xterm-keys on

# set -g status-bg '#333333' # dark gray
# set -g status-fg '#33b5e5' # holo blue
# set -g status-style "bg=#333333"
# set -ag status-style "fg=#33b5e5"

# colors for raspberry pi
# set -g status-bg '#E30B5D' # raspberry
# set -g status-fg '#ffffff'

# Save into System Clipboard (+). With preselection.
bind "C-c" choose-buffer "run \"tmux save-buffer -b %% - \
| xclip -i -sel clipboard\" \; run \" tmux display \\\"Clipboard \(+\) \
filled with: $(tmux save-buffer -b %1 - | dd ibs=1 obs=1 status=noxfer \
count=80 2> /dev/null)... \\\" \" "
# Paste from + Clipboard.
bind "C-v" run "tmux set-buffer \"$(xclip -o -sel clipboard)\"; \
tmux paste-buffer" \; run "tmux display \"Copied from \(+\) $(xclip -o -sel \
clipboard | dd ibs=1 obs=1 status=noxfer count=80 2> /dev/null)... \""
# Save into Selection Clipboard (*). With preselection.
bind "C-d" choose-buffer "run \"tmux save-buffer -b %% - | xclip -i\" \; \
run \" tmux display \\\"Clipboard \(*\) filled with: $(tmux save-buffer -b \
%1 - | dd ibs=1 obs=1 status=noxfer count=80 2> /dev/null)... \\\" \" "
# Copy from * Clipboard.
bind "C-f" run "tmux set-buffer \"$(xclip -o)\"; tmux paste-buffer" \; run \
"tmux display \"Copied from \(*\) $(xclip -o | dd ibs=1 obs=1 status=noxfer \
count=80 2> /dev/null)... \""

# all panes were created equally
bind -n C-h run "(tmux display-message -p '#{pane_title}' | grep -iq vim && tmux send-keys C-h) || tmux select-pane -L"
bind -n C-j run "(tmux display-message -p '#{pane_title}' | grep -iq vim && tmux send-keys C-j) || tmux select-pane -D"
bind -n C-k run "(tmux display-message -p '#{pane_title}' | grep -iq vim && tmux send-keys C-k) || tmux select-pane -U"
bind -n C-l run "(tmux display-message -p '#{pane_title}' | grep -iq vim && tmux send-keys C-l) || tmux select-pane -R"

bind S command-prompt -p "Make/attach session:" "new-window 'tmuxstart \'%%\''"

# For 1.9 - Make new windows start in the
# same directory as the current window
if-shell "[[ `tmux -V` == *1.9 ]]" \
    'unbind c; bind c new-window -c "#{pane_current_path}"'

if-shell "[[ `hostname` == strawberry ]]" \
	'set -g status-bg pink'
